Exercises:

1. Indicate whether each of the following files is more likely to contain text
data or binary data:

(a) A file of object code produced by a C compiler

Answer: binary 

(b) A program listing produced by a C compiler

Answer: ?? no idea what program listing means. Text I suppose.

(c) An email message sent from one computer to another

Answer: text

(d) A file containing a graphics image

Answer: binary

----------------------------------------------------------------------------
2. Indicate which mode string is most likely to be passed to fopen in each of
the following situations:

(a) A database management system opens a file containing records to be updated.

Answer: r+b mode

(b) A mail program opens a file of saved messages so that it can add additional
messages to the end.

Answer: a mode

(c) A graphics program opens a file containing a picture to be displayed on the
screen.

Answer: rb mode

(d) An operating system command interpreter opens a "shell script" 
(or "batch file") containing commands to be executed.

Answer: r mode

---------------------------------------------------------------------------
3. Find the error in the following program fragment and show how to fix it.

FILE *fp;

if (fp = fopen(filename, "r")) {
    //read characters until end of file
}
fclose(fp);

Answer:
The issue: fclose(fp) will give us an error if fp is a null pointer.

Fix the issue:
FILE *fp;

fp = fopen(filename, "r");

if (fp == NULL)
{
    printf("Error, cannot open file: %s\n", filename);
    exit(EXIT_FAILURE);
}

//read characters until end of file....

fclose(fp);

----------------------------------------------------------------------------
4. Show how each of the following numbers will look if displayed by printf with 
%#012.5g as the conversion specification:

see b1_input_output_ex4.c

---------------------------------------------------------------------------
5. skipped.

6. see b1_input_output_ex6.c

7. skipped.

----------------------------------------------------------------------------
8. In previous chapters, we've used the scanf format string " %c" when we wanted 
to skip white-space characters and read a nonblank character. Some programmers 
use "%1s" instead. Are the two techniques equivalent? If not, what are the
differences?

Answer:

" %c": The format specifier " %c" is used to read a single character from input. 
The space before %c tells scanf to skip any leading whitespace 
(such as spaces, tabs, or newlines) before reading the character. It reads 
exactly one character, including any non-whitespace characters 
(like letters, digits, symbols, etc.).

"%1s": The format specifier "%1s" is used to read a string of at most one 
character, excluding leading whitespace. It stops reading input when it 
encounters whitespace. "%1s" behaves like %s, which skips any leading 
whitespace and then reads a sequence of non-whitespace characters, but it will 
only read a maximum of one non-whitespace character.

" %c" reads a single character and stores it in a char variable.

"%1s" reads a single non-whitespace character into a string (a char array) and 
appends a null terminator (\0).
------------------------------------------------------------------------------
9. Which of the following calls is not a valid way of reading one character from 
the standard input stream?

(a) getch()

(b) getchar()

(c) getc(stdin)

(d) fgetc(stdin)

Answer: (a).

getch() does not read from stdin. 
getch() reads a single character from the keyboard without echoing it on the 
screen (useful for password input, etc.). It doesnâ€™t require pressing "Enter" 
to read the character.

-------------------------------------------------------------------------------
10. see b1_input_output_ex10.c

-------------------------------------------------------------------------------
11. The following loop appears in the fcopy.c program:

while ((ch = getc(source_fp)) != EOF)
    putc(ch, dest_fp);

Suppose that we neglected to put parentheses around ch = getc(source_fp):
while (ch = getc(source_fp) != EOF)
    putc(ch, dest_fp);

Would the program compile without an error? IF so, what would the program do
when it's run?

Answer: 
For the first while statement, it works fine with stdin and stdout. For the 
second while statement, getc(source_fp) is comared to EOF using != first, then 
the result fo the equality is then assigned to the variable ch. Operator 
precedence is the issue here.

------------------------------------------------------------------------------

12. Find the error in the following function and show how to fix it.
int count_periods(const char *filename) 
{
    FILE *fp;
    int n = 0;
    if ((fp = fopen(filename, "r")) != NULL) {
        while (fgetc(fp) != EOF) {
            if (fgetc(fp) == '.') {
                n++;
            }
        }
        fclose(fp);
    }
    return n;
}

Answer: 
the result of fgetc(fp) is not assigned a variable to store the result.
This error code will result in 2 calls to fgetc(fp) per while loop iteration.
First call fgetc: checks for EOF.
Second call fgetc: checks if the character is a period '.'
This means every other character is skipped because fgetc(fp) moves the file
pointer each time it is called.

see b1_input_output_ex12.c and ex12_test.txt
----------------------------------------------------------------------------

13. Write the following function:
int line_length(const char *filename, int n);

The function should return the length of line n in the text file whose name is
filename (assuming that the first line in the file is line 1.) If the line does
not exist, the function should return 0.

see b1_input_output_ex13.c and ex13_test.txt

-----------------------------------------------------------------------------

14. 
(a) Write your own version of the fgets function. Make it behave as much like
the real fgets function as possible; in particular, make sure that it has the 
proper return value. To avoid conflicts with the standard library, don't name
your function fgets.

(b) Write your own version of fputs, same rule as (a).


Answer: see b1_input_output_ex14.c and ex14_test.txt

-----------------------------------------------------------------------------

15. Write calls of fseek that perform the following file-positioning operations
on a binary file whose data is arranged in 64-byte "records". Use fp as the file
pointer in each case.

(a) Move to the beginning of record n. (Assume that the first record in the file
is record 0.)

(b) Move to the beginning of the last record in the file.

(c) Move forward one record.

(d) Move backward two records.

Answer: see b1_input_output_ex15.c

------------------------------------------------------------------------------

16. skipped.

==============================================================================

Projects

1. skipped

2. see b1_input_output_proj2.c and proj2_test.txt

3-6. skipped

7. 
see b1_input_output_proj7_partA.c, b1_input_output_proj7_partB.c, 
proj7_partA_test.txt, proj7_partA_test.txt.rle

possibly skipped some problems...because too tedious...

16. see b1_input_output_proj16.c

17. see b1_input_output_proj17.c

18. see b1_input_output_proj18.c

19. see b1_input_output_proj19.c