1. The following function calls supposedly write a single newline character, but some are incorrect. Identify which calls don't work and explain why.

(a) printf("%c", '\n');
(b) printf("%c", "\n");
(c) printf("%s", '\n');
(d) printf("%s", "\n");
(e) printf('\n');
(f) printf("\n");
(g) putchar('\n');
(h) putchar("\n");
(i) puts('\n');
(j) puts("\n");
(k) puts("");

(b) is wrong because "\n" is not a char but a string literal
(c) is wrong because '\n' is a char not string
(e) is wrong because '\n' is a char not string
(h) is wrong because "\n" is a string not char
(i) and (k) will not work because puts expects string not char
------------------------------------------------------------------
2. Suppose that p has been declared as follows:

char *p = "abc";
Which of the following function calls are legal? Show the output produced by each legal call, and explain why the others are illegal.

(a) putchar(p);
(b) putchar(*p); 
(c) puts(p);
(d) puts(*p);

(a) is illegal because p is a pointer to char
(b) is legal because it will be letter a 
(c) is legal
(d) is illegal because puts need char* not char

-----------------------------------------------------------------
3. Suppose that we call scanf as follows:

scanf("%d%s%d", %i, s, &j);
If the user enters 12abc34 56def78, what will be the values of i, s and j after the call? 
(Assume that i and j are int variables and s is an array of characters.)

Answer:
i: 12
s: abc34
j: 56

The first %d tells scanf to automatically skips any leading whitespace, reads consecutive digits, 
and stops at the first non-digit character.

The middle %s tells scanf to stop reading at the first whitespace character after encountering non-whitespace characters.

The last %d tells scanf to automatically skips any leading whitespace, reads consecutive digits, 
and stops at the first non-digit character.
-----------------------------------------------------------------
4. Modify the read_line function in each of the following ways:

(a) Have it skip whitespace before beginning to store input characters.
(b) Have it stop reading at the first whitespace character. Hint: To determine whether or not a character is whitespace, call the isspace function.
(c) Have it stop reading at the first newline character, then store the newline character in the string.
(d) Have it leave behind characters that it doesn't have room to store.

see b1_strings_ex4.c

